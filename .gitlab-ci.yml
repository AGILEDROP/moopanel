image: lorisleiva/laravel-docker:8.2

variables:
  IMAGE_NAME: agiledrop/moopanel
  IMAGE_TAG: moopanel-dashboard-1.0.0


stages:
  - php_build
  - js_build
  - test
  - docker_build
  - deploy

composer:
  stage: php_build
  image: composer:2.7.7
  before_script:
    - cd $CI_PROJECT_DIR/web # Navigate to the project directory
  script:
    - composer -v
    - composer install --prefer-dist --no-ansi --no-interaction --no-scripts --ignore-platform-reqs --no-progress
    - ls -la
    - ls -la ..
  artifacts:
    expire_in: 1 month
    paths:
      - web/vendor/
  cache:
    key: ${CI_COMMIT_REF_SLUG}-composer
    paths:
      - web/vendor/

  # TODO: uncomment
  only:
    - master

npm:
  # Differnt stage as `composer` because we need /vendor artefact that contains tailwindcss presets
  stage: js_build
  image: node:22.5.1-slim
  dependencies:
    - composer #to be able to have filament tailwind style presets
  before_script:
    - cd $CI_PROJECT_DIR/web # Navigate to the project directory
  # Install and compile.
  script:
    - ls -la
    - ls -la ..
    - node -v
    - npm -v
    - npm install # node_modules
    - npm run build # public/build
  cache:
    key: ${CI_COMMIT_REF_SLUG}-npm
    paths:
      - web/node_modules/
  artifacts:
    expire_in: 1 month
    paths:
      - web/node_modules/
      - web/public/build
  # TODO: uncomment
  only:
    - master

filament:
  # Same stage as `npm` job so that can they run in parallel.
  stage: js_build
  image: php:8.2-alpine3.17
  dependencies:
    - composer #to be able to have filament tailwind style presets
  before_script:
    - cd $CI_PROJECT_DIR/web # Navigate to the project directory
  # Install and compile.
  script:
    - php artisan filament:assets
  artifacts:
    expire_in: 1 month
    paths:
      - web/public/css/
      - web/public/js/
  # TODO: uncomment
  only:
    - master

phpunit:
  stage: test
  # List of jobs from which it will download the artifacts.
  #dependencies:
  #  - composer
  script:
    - echo "TODO Running PHPUnit tests"
    #- phpunit --coverage-text --colors=never

codestyle:
  stage: test
  dependencies: []
  script:
    - echo "Running PHP Code Linting"
    #- phpcs --standard=PSR2 --extensions=php --ignore=app/Support/helpers.php app

image_build:
  stage: docker_build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker info
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  script:
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - docker push $IMAGE_NAME:$IMAGE_TAG

  only:
    - cicd_testing

# Add a `.` in front of a job to make it hidden.
# Add a `&reference` to make it a reusable template.
# Note that we don't have dashes anymore.
.init_ssh: &init_ssh |
  command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )
  eval $(ssh-agent -s)
  chmod 400 "$SSH_PRIVATE_KEY"
  ssh-add "$SSH_PRIVATE_KEY"
  mkdir -p ~/.ssh
  chmod 700 ~/.ssh

#ssh-keyscan -H 10.31.10.11 >> ~/.ssh/known_hosts

production:
  stage: deploy
  before_script:
    - "command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )"
    - eval $(ssh-agent -s)
    - chmod 400 "$SSH_PRIVATE_KEY"
    - ssh-add "$SSH_PRIVATE_KEY"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_PUBLIC_KEY" >> ~/.ssh/id_rsa.pub
    - ls -la ~/.ssh
    - cat ~/.ssh/id_rsa.pub
    #- ssh-keyscan 10.31.10.11
    #- cat ~/.ssh/known_hosts
    #- chmod 644 ~/.ssh/known_hosts
  script:
    - echo "connecting to server"
    - echo "run gitlab runner on mdcenter to be able to connect to server"
    #- ssh -vvv -o StrictHostKeyChecking=no -i "$SSH_PRIVATE_KEY" root@10.31.10.11 "
    #  whoami &&
    #  docker ps"
  # Do not run automatically.
  # Wait for a human to click on play.
  #when: manual
  # TODO: uncomment
  only:
    - master
