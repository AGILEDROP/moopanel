before_script:
  ##
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  ##
  - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Give the right permissions, otherwise ssh-add will refuse to add files
  ## Add the SSH key stored in SSH_PRIVATE_KEY file type CI/CD variable to the agent store
  ##
  - chmod 400 "$SSH_PRIVATE_KEY"
  - ssh-add "$SSH_PRIVATE_KEY"

  ##
  ## Create the SSH directory and give it the right permissions
  ##
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

deploy:
  stage: deploy
  script:
    # Git
    #- rsync -av --exclude=.git --no-perms -O . /var/www/;
    - cd /var/www
    - git checkout master
    - git pull origin master
    # Docker
    - docker image prune -f
    - docker-compose -f production.yml pull && docker-compose -f production.yml up -d --build --no-deps
    - docker-compose -f production.yml exec -T map-php composer install --optimize-autoloader --no-dev
    # Laravel
    - docker-compose -f production.yml exec -T map-php php artisan down
    - docker-compose -f production.yml exec -T map-php php artisan migrate --force
    - docker-compose -f production.yml exec -T map-php php artisan storage:link
    - docker-compose -f production.yml exec -T map-php php artisan cache:clear
    - docker-compose -f production.yml exec -T map-php php artisan config:clear
    - docker-compose -f production.yml exec -T map-php php artisan config:cache
    - docker-compose -f production.yml exec -T map-php php artisan event:cache
    - docker-compose -f production.yml exec -T map-php php artisan route:cache
    - docker-compose -f production.yml exec -T map-php php artisan view:cache
    - docker-compose -f production.yml exec -T map-php php artisan db:seed --force
    - docker-compose -f production.yml exec -T map-php php artisan queue:restart
    # Filament
    - docker-compose -f production.yml exec -T map-php php artisan icons:cache
    - docker-compose -f production.yml exec -T map-php php artisan filament:cache-components
    # Up
    - docker-compose -f production.yml exec -T map-php php artisan up
    #- rm /var/www/web/storage/logs/laravel.log
  only:
    - master