image: lorisleiva/laravel-docker:8.2

stages:
  - php_build
  - js_build
  - test
  - deploy

composer:
  stage: php_build
  image: composer:2.7.7

  before_script:
    - cd $CI_PROJECT_DIR/web # Navigate to the project directory

  script:
    - composer -v
    - composer install --prefer-dist --no-ansi --no-interaction --no-scripts --ignore-platform-reqs --no-progress
    - cp -R vendor/ ..
    - echo "building..." >> ./web_build_result.txt
    - echo "building..." >> ../root_build_result.txt
    - ls -la
    - ls -la ..
    # TODO: check where are .env variables
    #- cp .env.example .env
    #- php artisan key:generate

  artifacts:
    expire_in: 1 month
    paths:
      - vendor/
      - web/web_build_result.txt
      - root_build_result.txt

  #cache:
    # The variable CI_COMMIT_REF_SLUG
    # refers to the slug of the branch.
    # For example: `master` for the master branch.
    # We use the `composer` suffix to avoid conflicts with
    # the `npm` cache that we'll define next.
   # key: ${CI_COMMIT_REF_SLUG}-composer

    # Define what to cache.
    #paths:
     # - vendor/

npm:
  # Same stage as `composer` so that they run in parallel.
  stage: js_build
  image: node:22.5.1-slim

  dependencies:
    - composer #to be able to have filament tailwind style presets

  before_script:
    - cd $CI_PROJECT_DIR/web # Navigate to the project directory

  # Install and compile.
  script:
    - ls -la
    - ls -la ..
    - cat web_build_result.txt
    - cat ../root_build_result.txt
    - node -v
    - npm -v
    - npm install # node_modules
    - npm run build # public/build

  # Cache the `node_modules` folder
  # using the `npm` suffix on the key.
  cache:
    key: ${CI_COMMIT_REF_SLUG}-npm
    paths:
      - web/node_modules/

  # Provide the other jobs of the pipeline with
  # the node dependencies and the compiled assets.
  artifacts:
    expire_in: 1 month
    paths:
      - web/node_modules/
      - web/public/build
      #- public/css/
      #- public/js/

filament:
  # Same stage as `composer` so that they run in parallel.
  stage: js_build

  # Install and compile.
  script:
    - php artisan filament:assets

  # Provide the other jobs of the pipeline with
  # the node dependencies and the compiled assets.
  artifacts:
    expire_in: 1 month
    paths:
      - public/css/
      - public/js/

phpunit:
  stage: test

  # List of jobs from which it will download the artifacts.
  dependencies:
    - composer

  script:
    - echo "Running PHPUnit tests"
    #- phpunit --coverage-text --colors=never

codestyle:
  stage: test
  dependencies: []
  script:
    - echo "Running PHP Code Sniffer"
    #- phpcs --standard=PSR2 --extensions=php --ignore=app/Support/helpers.php app

# Add a `.` in front of a job to make it hidden.
# Add a `&reference` to make it a reusable template.
# Note that we don't have dashes anymore.
.init_ssh: &init_ssh |
  command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )
  eval $(ssh-agent -s)
  chmod 400 "$SSH_PRIVATE_KEY"
  ssh-add "$SSH_PRIVATE_KEY"
  mkdir -p ~/.ssh
  chmod 700 ~/.ssh

production:
  stage: deploy
  script:
    - *init_ssh # This is pretty convenient now.
    - echo "connected to server"
    - pwd

  # Do not run automatically.
  # Wait for a human to click on play.
  when: manual

  only:
    - master
